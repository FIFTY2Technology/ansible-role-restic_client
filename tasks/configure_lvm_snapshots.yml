---

###
# This task will only change LVM setting if it is set to the default value '100'
# explicitly (Debian-based distros) or is commented-out (RedHat-based distros).
# The LVM setting 'snapshot_autoextend_percent' is also important for this
# feature, but won't be changed for now, a default 20 percent increase seems
# reasonable.
# Regexp:
#   ^([\s]*)  From beginning of line, match 0-n space characters, and store them
#             in a backref group, referenced via \1 in 'line'.
#   (?:# )?   Match '# ' if present, but don't store it in a backref group
###
- name: Configure LVM to automatically extend near-full snapshots with available extents
  ansible.builtin.lineinfile:
    path: /etc/lvm/lvm.conf
    regexp: '^([\s]*)(?:# )?snapshot_autoextend_threshold = 100$'
    backrefs: true
    line: |-
      \1### snapshot_autoextend_threshold = 100
      \1### Ansible managed - fifty2technology.restic_client
      \1snapshot_autoextend_threshold = 80
    validate: /usr/sbin/lvmconfig --validate --file %s
  notify: Restart LVM event listener
  when: restic_client_lvm_allow_edit_lvmconf

###
# This prevents restic from reading files inside the LVM snapshot directory.
# Due to deduplication it does not harm including those files, but the filecount
# doubles. Also, good for general clearness.
###
- name: Set LVM snapshot mount directory to be excluded from backups
  ansible.builtin.set_fact:
    restic_client_default_excludes: "{{ restic_client_default_excludes + [restic_client_lvm_snapshot_dir] }}"

###
# From list '_lvm_attributes', extract fields that are actual useful for mounting.
#   * '_lvm_mounts' picks the mountpoint (e.g. '/home'). Used for naming snapshots.
#   * '_lvm_devices' picks the device (e.g. '/dev/mapper/something'). Used as
#      snapshot source.
#   * '_lvm_fstypes' picks the filesystem type (e.g. 'ext4'). Used for setting
#      extra mount options (e.g. for xfs).
###
- name: Extract useful information from gathered mounted devices
  ansible.builtin.set_fact:
    _lvm_mounts: "{{ _lvm_attributes | map(attribute='mount') }}"
    _lvm_devices: "{{ _lvm_attributes | map(attribute='device') }}"
    _lvm_fstypes: "{{ _lvm_attributes | map(attribute='fstype') }}"

###
# Get back a single line with information about the volume group name and
# logical volume name, separated by '/', so we don't need to separate on two
# different field separators. See man dmsetup(8) for more information.
# Example:
# ~# dmsetup splitname --noheadings --separator='/' /dev/mapper/my--vg-root LVM
#  /dev/mapper/my-vg/root/
# Field 3 is the volume group's name, field 4 is the logical volume's name.
###
- name: Get information about VG name from 'dmsetup' command
  ansible.builtin.command:
    cmd: "dmsetup splitname --noheadings --separator='/' {{ dm_device }} LVM"
  register: _dmsetup_output
  loop: "{{ _lvm_devices }}"
  loop_control:
    loop_var: dm_device
  changed_when: false
  check_mode: false

###
# The volume group's names are required so that a path to the snapshot volume,
# that is going to be mounted, can be constructed ('/dev/<vg_name>/<lv_name>').
# The logical volume's names are not actually required so far, but used in the
# templates as a safety guard to skip all LVs which have a name that starts with
# 'backup_'.
###
- name: Extract information about LVM from previous task
  ansible.builtin.set_fact:
    _lvm_vg_names: "{{ _lvm_vg_names \
      | default([]) \
      + [item.stdout.split('/')[3]] }}"
    _lvm_lv_names: "{{ _lvm_lv_names \
      | default([]) \
      + [item.stdout.split('/')[4]] }}"
  loop: "{{ _dmsetup_output.results }}"
  loop_control:
    label: "{{ item.dm_device }}"

###
# The 'list' filter doesn't seem to be necessary here for the sorting to be
# correct. It is important to 'zip' this way, and not the other way around, so
# 'sort' can do its job on the first element of each sub-list (the mountpoint,
# not the device path) later in the template files.
# This list is used in the 'templates/restic-snapshot-create.service.j2'
# systemd service template file, and used in reverse-sorted order in the
# 'templates/restic-snapshot-delete.service.j2' systemd service template file.
# Exclution of LVs names including 'swap' or 'tmp' is done inside the templates.
# Example '_lvm_mounted_devices':
#   [
#      "/",
#      "/dev/mapper/debian--vg-root",
#      "debian-vg",
#      "root",
#      "ext4"
#  ],
#  [
#      "/home",
#      "/dev/mapper/debian--vg-home",
#      "debian-vg",
#      "home",
#      "ext4"
#  ],
#  [
#      "/srv",
#      "/dev/mapper/new_vg-volume1",
#      "new_vg",
#      "volume1",
#      "xfs"
#  ]
###
- name: Link together LVM devices and mountpoints
  ansible.builtin.set_fact:
    _lvm_mounted_devices: "{{ _lvm_mounts \
      | zip(_lvm_devices, _lvm_vg_names, _lvm_lv_names, _lvm_fstypes) \
      | list }}"

- name: Create folder for snapshot mounts of logical volumes
  ansible.builtin.file:
    path: "{{ restic_client_lvm_snapshot_dir }}/"
    state: directory
    owner: "{{ restic_client_user }}"
    group: "{{ restic_client_group }}"
    mode: '0750'

- name: Template systemd service files for snapshot handling
  ansible.builtin.template:
    src: "templates/{{ item }}.j2"
    dest: "/etc/systemd/system/{{ item }}"
    owner: root
    group: root
    mode: '0644'
  notify: Reload systemd
  loop:
    - restic-snapshot-create.service
    - restic-snapshot-delete.service

- name: Configure restic-backup.service to run LVM-related services around itself
  ansible.builtin.template:
    src: templates/restic-backup.service.d/lvm.conf.j2
    dest: /etc/systemd/system/restic-backup.service.d/lvm.conf
    owner: root
    group: root
    mode: '0644'
  notify: Reload systemd
