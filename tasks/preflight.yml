---

- name: Check that encryption password is defined
  ansible.builtin.assert:
    that:
      - restic_client_encryption_password | length > 0
    fail_msg: >-
      Error: 'restic_client_encryption_password' is not provided.
      Please configure variable with a strong and unique encryption password per host.

###
# Create group first. In case 'restic_client_user' and 'restic_client_group' are
# not the same name, group has to exist and will not get created in task below.
###
- name: Create backup group
  ansible.builtin.group:
    name: "{{ restic_client_group }}"
    system: true
    state: present

###
# Creates a system user account
###
- name: Create backup user
  ansible.builtin.user:
    name: "{{ restic_client_user }}"
    password: '*'
    system: true
    group: "{{ restic_client_group }}"
    home: "{{ restic_client_home }}"
    shell: /bin/bash
    state: present

###
# Guess if repository is a local directory with 'is abs' (is absolute path) and
# create it. Remote repositories ('sftp:', 'rest:', 's3:', 'b2:' etc.) do not
# match as absolute path.
###
- name: Create repository directory
  ansible.builtin.file:
    path: "{{ lookup('template', restic_client_repository) | trim }}"
    owner: "{{ restic_client_user }}"
    group: "{{ restic_client_group }}"
    mode: '0750'
    state: directory
  when:
    - lookup('template', restic_client_repository) | trim is abs

- name: Create directory for restic config files
  ansible.builtin.file:
    path: "{{ restic_client_config_dir }}"
    owner: root
    group: root
    mode: '0755'
    state: directory

###
# Add systemd service drop-in directory. Files in there with '.conf' suffix will
# be parsed as part of the service file. Allows easy expansion and altering of
# existing systemd service files without altering the original service file.
# Currently used for:
#   * LVM snapshots configuration (lvm.conf)
#   * Custom commands prior to the backup (prepare.conf)
###
- name: Create drop-in directory for restic-backup.service
  ansible.builtin.file:
    path: /etc/systemd/system/restic-backup.service.d
    state: directory
    owner: root
    group: root
    mode: '0755'

###
# This task makes it easier to run 'restic' commands as the backup user (restic).
# It sources the environment variables necessary to run the 'restic' command from
# the file that holds the vars for the systemd service (see 'EnvironmentFile'
# option in the service file).
# To use restic, do 'su - restic' and then e.g. 'restic snapshots'
###
- name: Export environment variables for login shells
  ansible.builtin.blockinfile:
    path: "{{ restic_client_home }}/.bash_profile"
    marker: "# {mark} ANSIBLE MANAGED restic env BLOCK"
    block: |
      # include environment variables if backup.conf exists
      if [ -e "{{ restic_client_config_dir }}/backup.conf" ] ; then
          . "{{ restic_client_config_dir }}/backup.conf"
          export RESTIC_REPOSITORY_FILE
          export RESTIC_PASSWORD_FILE
      fi
    state: present
    create: true
    owner: "{{ restic_client_user }}"
    group: "{{ restic_client_group }}"
    mode: '0640'

###
# From gathered facts 'ansible_mounts', consider all mounts that have a
# device-path starting with '/dev/mapper/'.
# Since the items are sorted by attribute 'mount', they already have
# the correct order in which their snapshots will need to be mounted later.
# More useful fields will be extracted in 'tasks/configure_lvm_snapshots.yml',
# but we need to create this variable in here already, so we can check for
# existing LVM volumes in 'tasks/main.yml' and conditionally include 'tasks/
# configure_lvm_snapshots.yml'.
###
- name: Get a list of all devices and mountpoints associated with LVM
  ansible.builtin.set_fact:
    _lvm_attributes: "{{ ansible_mounts \
      | selectattr('device', 'match', '^/dev/mapper/.*$') \
      | sort(attribute='mount') \
      | list }}"
